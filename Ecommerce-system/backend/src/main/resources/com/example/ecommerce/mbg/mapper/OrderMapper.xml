<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ecommerce.mbg.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="com.example.ecommerce.mbg.model.Order">
    <id column="OrderID" jdbcType="VARCHAR" property="orderid" />
    <result column="UserID" jdbcType="VARCHAR" property="userid" />
    <result column="State" jdbcType="INTEGER" property="state" />
    <result column="PayTime" jdbcType="TIMESTAMP" property="paytime" />
    <result column="GetTIme" jdbcType="TIMESTAMP" property="gettime" />
    <result column="CommentTime" jdbcType="TIMESTAMP" property="commenttime" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="GoodId" jdbcType="VARCHAR" property="goodid" />
    <result column="attribute" jdbcType="VARCHAR" property="attribute" />
    <result column="address" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.ecommerce.mbg.model.Order">
    <result column="Comment" jdbcType="LONGVARCHAR" property="comment" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    OrderID, UserID, State, PayTime, GetTIme, CommentTime, `number`, price, money, GoodId,
    attribute, address
  </sql>
  <sql id="Blob_Column_List">
    Comment
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.ecommerce.mbg.model.OrderExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.ecommerce.mbg.model.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `order`
    where OrderID = #{orderid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from `order`
    where OrderID = #{orderid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.ecommerce.mbg.model.OrderExample">
    delete from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.ecommerce.mbg.model.Order">
    insert into `order` (OrderID, UserID, State,
      PayTime, GetTIme, CommentTime, 
      number, price, money, 
      GoodId, attribute, address, 
      Comment)
    values (#{orderid,jdbcType=VARCHAR}, #{userid,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, 
      #{paytime,jdbcType=TIMESTAMP}, #{gettime,jdbcType=TIMESTAMP}, #{commenttime,jdbcType=TIMESTAMP}, 
      #{number,jdbcType=INTEGER}, #{price,jdbcType=DECIMAL}, #{money,jdbcType=DECIMAL}, 
      #{goodid,jdbcType=VARCHAR}, #{attribute,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{comment,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.ecommerce.mbg.model.Order">
    insert into `order`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderid != null">
        OrderID,
      </if>
      <if test="userid != null">
        UserID,
      </if>
      <if test="state != null">
        State,
      </if>
      <if test="paytime != null">
        PayTime,
      </if>
      <if test="gettime != null">
        GetTIme,
      </if>
      <if test="commenttime != null">
        CommentTime,
      </if>
      <if test="number != null">
        `number`,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="goodid != null">
        GoodId,
      </if>
      <if test="attribute != null">
        attribute,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="comment != null">
        Comment,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderid != null">
        #{orderid,jdbcType=VARCHAR},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="paytime != null">
        #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="gettime != null">
        #{gettime,jdbcType=TIMESTAMP},
      </if>
      <if test="commenttime != null">
        #{commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="goodid != null">
        #{goodid,jdbcType=VARCHAR},
      </if>
      <if test="attribute != null">
        #{attribute,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.ecommerce.mbg.model.OrderExample" resultType="java.lang.Long">
    select count(*) from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `order`
    <set>
      <if test="record.orderid != null">
        OrderID = #{record.orderid,jdbcType=VARCHAR},
      </if>
      <if test="record.userid != null">
        UserID = #{record.userid,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        State = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.paytime != null">
        PayTime = #{record.paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gettime != null">
        GetTIme = #{record.gettime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commenttime != null">
        CommentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.number != null">
        `number` = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=DECIMAL},
      </if>
      <if test="record.goodid != null">
        GoodId = #{record.goodid,jdbcType=VARCHAR},
      </if>
      <if test="record.attribute != null">
        attribute = #{record.attribute,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.comment != null">
        Comment = #{record.comment,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update `order`
    set OrderID = #{record.orderid,jdbcType=VARCHAR},
      UserID = #{record.userid,jdbcType=VARCHAR},
      State = #{record.state,jdbcType=INTEGER},
      PayTime = #{record.paytime,jdbcType=TIMESTAMP},
      GetTIme = #{record.gettime,jdbcType=TIMESTAMP},
      CommentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      `number` = #{record.number,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      money = #{record.money,jdbcType=DECIMAL},
      GoodId = #{record.goodid,jdbcType=VARCHAR},
      attribute = #{record.attribute,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      Comment = #{record.comment,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `order`
    set OrderID = #{record.orderid,jdbcType=VARCHAR},
      UserID = #{record.userid,jdbcType=VARCHAR},
      State = #{record.state,jdbcType=INTEGER},
      PayTime = #{record.paytime,jdbcType=TIMESTAMP},
      GetTIme = #{record.gettime,jdbcType=TIMESTAMP},
      CommentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      `number` = #{record.number,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      money = #{record.money,jdbcType=DECIMAL},
      GoodId = #{record.goodid,jdbcType=VARCHAR},
      attribute = #{record.attribute,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.ecommerce.mbg.model.Order">
    update `order`
    <set>
      <if test="userid != null">
        UserID = #{userid,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        State = #{state,jdbcType=INTEGER},
      </if>
      <if test="paytime != null">
        PayTime = #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="gettime != null">
        GetTIme = #{gettime,jdbcType=TIMESTAMP},
      </if>
      <if test="commenttime != null">
        CommentTime = #{commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="number != null">
        `number` = #{number,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="goodid != null">
        GoodId = #{goodid,jdbcType=VARCHAR},
      </if>
      <if test="attribute != null">
        attribute = #{attribute,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="comment != null">
        Comment = #{comment,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where OrderID = #{orderid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.ecommerce.mbg.model.Order">
    update `order`
    set UserID = #{userid,jdbcType=VARCHAR},
      State = #{state,jdbcType=INTEGER},
      PayTime = #{paytime,jdbcType=TIMESTAMP},
      GetTIme = #{gettime,jdbcType=TIMESTAMP},
      CommentTime = #{commenttime,jdbcType=TIMESTAMP},
      `number` = #{number,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      money = #{money,jdbcType=DECIMAL},
      GoodId = #{goodid,jdbcType=VARCHAR},
      attribute = #{attribute,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      Comment = #{comment,jdbcType=LONGVARCHAR}
    where OrderID = #{orderid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.ecommerce.mbg.model.Order">
    update `order`
    set UserID = #{userid,jdbcType=VARCHAR},
      State = #{state,jdbcType=INTEGER},
      PayTime = #{paytime,jdbcType=TIMESTAMP},
      GetTIme = #{gettime,jdbcType=TIMESTAMP},
      CommentTime = #{commenttime,jdbcType=TIMESTAMP},
      `number` = #{number,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      money = #{money,jdbcType=DECIMAL},
      GoodId = #{goodid,jdbcType=VARCHAR},
      attribute = #{attribute,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where OrderID = #{orderid,jdbcType=VARCHAR}
  </update>
</mapper>